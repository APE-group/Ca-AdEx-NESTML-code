#ca_adex - Two compartment Ca-AdEx neuron NESTML description
################################################################################
#
#  Copyright © 2025   Elena Pastorelli          <elena.pastorelli@roma1.infn.it>
#  Copyright © 2025   Pier Stanislao Paolucci   <pier.paolucci@roma1.infn.it>
#  Copyright © 2025   Pooja Babu                <p.babu@fz-juelich.de>
#
#  SPDX-License-Identifier: GPL-3.0-only
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
#  Note: Please keep the list of original authors and feel free to
#  add your name if you make substantial contributions, in accordance
#  with the GPL-3 license.
#
#
#
#Description
#+++++++++++
#
#ca_adex is the two compartment spiking neuron that implements the calcium spikes according to Pastorelli et al. (2025)[1].
#
#Neuronal equations:
#
# Somatic compartment:
#.. math::
#
#   C_m^s \frac{dV^s}{dt} &=
#   -g_L^s(V^s-E_L^s)+g_L^s\Delta_T\exp\left(\frac{V^s-V_{th}^s}{\Delta_T}\right) +
#   - g_e^s(t)(V^s-E_e^s)-g_i^s(t)(V^s-E_i^s) +
#   - g_w w + I_e^s - g_C(V^s-V^d)
#
#Adaptation:
#
#.. math::
#
#    \tau_w \frac{dw}{dt} &= a(V^s-E_L^s) +b\sum_{k}\delta (t-t_{k}) - w
#
#Distal compartment
#
#.. math::
#
#   C_m^d \frac{dV^d}{dt} =
#   -g_L^d(V^d-E_L^d) - g_e^d(t)(V^d-E_e^d)-g_i^d(t)(V^d-E_i^d) + 
#   + I_{Ca} + I_{K_{Ca}} + w_{BAP}\sum_{k}\delta (t-(t_{k}+d_{BAP}))+
#   + I_e^d + g_C(V^d-V^s)
#
#Ca concentration:
#
#.. math::
#
#   \frac{d[Ca]}{dt} &= \phi_{Ca}I_{Ca} - \frac{[Ca] - [Ca]_0}{\tau_{Ca}}
#
#
#
#References
#++++++++++
#
#.. [1] Pastorelli E., Yegenoglu A., Kolodziej N., Wybo W., Simula F., Diaz-Pier S.,
#   	Storm J.F., Paolucci P.S. (2025). Simplified two-compartment neuron with calcium dynamics
#       capturing brain-state specific apical-amplification, -isolation and -drive.
#       Front. Comput. Neurosci. DOI: https://doi.org/10.3389/fncom.2025.1566196


model ca_adex:

    state:
        V_m_s mV = e_L_s		# Somatic membrane potential
        w mV = 0 mV			# Spike-adaptation
        refr_t ms = 0 ms		# Refractory period timer

        V_m_d mV = e_L_d		# Distal membrane potential
        c_Ca mmol = Ca_0		# Ca concentration dynamics
        m_Ca real = m_inf_Ca(e_L_d)	# Ca current activation function
        h_Ca real = h_inf_Ca(e_L_d)	# Ca current deactivation function
        m_K real = m_inf_K(Ca_0)	# Ca dependent K current activation function

    equations:
        inline V_bounded_s mV = min(V_m_s, V_max)    # to prevent exponential divergence
        inline V_bounded_d mV = min(V_m_d, V_max)    # to prevent exponential divergence 

        # Soma
	
	# ALPHA synapse exc - soma
	kernel g_exc_s = (e / tau_syn_exc_s) * t * exp(-t / tau_syn_exc_s)
        inline I_syn_exc_s pA = convolve(g_exc_s, exc_spikes_soma) * nS * (V_bounded_s - E_exc_s)
	
	# ALPHA synapse inh - soma
        kernel g_inh_s = (e / tau_syn_inh_s) * t * exp(-t / tau_syn_inh_s)
        inline I_syn_inh_s pA = convolve(g_inh_s, inh_spikes_soma) * nS * (V_bounded_s - E_inh_s)
	
        inline exp_arg real = (V_bounded_s - e_Na_Adex) / delta_T
        inline I_spike pA = g_L_s * delta_T * exp(exp_arg)
        recordable inline I_C_s pA = g_C_d * (V_m_s - V_m_d)

        V_m_s' = (-g_L_s * (V_bounded_s - e_L_s) + I_spike - I_syn_exc_s - I_syn_inh_s - g_w * w + I_e_s + I_stim_s - I_C_s) / C_m_s
        w' = (a * (V_bounded_s - e_L_s) - w) / tau_w

        # Distal

	# ALPHA synapse exc - distal
        kernel g_exc_d = (e / tau_syn_exc_d) * t * exp(-t / tau_syn_exc_d)
	inline I_syn_exc_d pA = convolve(g_exc_d, exc_spikes_distal) * nS * (V_bounded_d - E_exc_d)
	
	# ALPHA synapse inh - distal
	kernel g_inh_d = (e / tau_syn_inh_d) * t * exp(-t / tau_syn_inh_d)
        inline I_syn_inh_d pA = convolve(g_inh_d, inh_spikes_distal) * nS * (V_bounded_d - E_inh_d)

        # AMPA synapse - distal
        kernel g_ampa = g_norm_ampa * ( - exp(-t / tau_r_ampa) + exp(-t / tau_d_ampa) )
        inline I_AMPA_d pA = convolve(g_ampa, spikes_ampa_d) * nS * (e_AMPA - V_m_d)

        # beta synapse - distal
        kernel g_beta = g_norm_beta * ( - exp(-t / tau_r_beta) + exp(-t / tau_d_beta) )
        recordable inline I_BETA_d pA = convolve(g_beta, spikes_beta_d) * nS * (e_L_beta - V_m_d)

	# AMPA-NMDA synapse - distal
        kernel g_nmda = g_norm_nmda * ( - exp(-t / tau_r_nmda) + exp(-t / tau_d_nmda) )
        inline I_AMPA_NMDA_d pA = convolve(g_ampa, spikes_ampa_nmda_d) * nS * (e_L_AMPA_NMDA - V_m_d) + nmda_ratio * \
                                  convolve(g_nmda, spikes_ampa_nmda_d) * nS * (e_L_AMPA_NMDA - V_m_d) / (1. + 0.3 * exp( -.1 * V_m_d ))

	recordable inline mh real = m_Ca * h_Ca
        recordable inline e_Ca mV = e_Ca_calc(k_Ca, R_Ca, T_Ca, c_Ca_o, c_Ca, F_Ca)
        recordable inline I_Ca pA = gbar_Ca * m_Ca * h_Ca * (e_Ca - V_m_d)
        recordable inline I_K pA = gbar_K_Ca * m_K * (e_K - V_m_d)
        recordable inline I_C_d pA = g_C_d * (V_m_d - V_m_s)    # Coupling current

	V_m_d' = (-g_L_d * (V_bounded_d - e_L_d) - I_syn_exc_d - I_syn_inh_d + I_AMPA_d + I_BETA_d + I_AMPA_NMDA_d + I_Ca + I_K + I_e_d + I_stim_d - I_C_d) / C_m_d
        m_Ca' = (m_inf_Ca(V_m_d) - m_Ca) / tau_m
        h_Ca' = (h_inf_Ca(V_m_d) - h_Ca) / tau_h
        c_Ca' = phi * I_Ca + (Ca_0 - c_Ca) / tau_decay_Ca
        m_K' = (m_inf_K(c_Ca) - m_K) / tau_m_K_Ca

        refr_t' = -1e3 * ms/s    # refractoriness is implemented as an ODE, representing a timer counting back down to zero. 

    parameters:
    
        # membrane parameters

        C_m_s pF = 246.7882968598874 pF         # Somatic membrane capacitance
        C_m_d pF = 23.67372778891213 pF		# Distal membrane capacitance
        t_ref ms = 0 ms              		# Refractory period
        d_BAP ms = 0.1195980511869619 ms        # Back propagation delay
        w_BAP mV = 27.995561755479308 mV	# Back propagation weight
        V_reset mV = -61.73952230767877 mV     	# Reset potential
        g_L_s nS = 5.0 nS          		# Somatic leak conductance
        g_L_d nS = 3.377855016658499 nS		# Distal leak conductance
        g_C_d nS = 19.777320239615996 nS	# Soma-distal coupling conductance
        g_w nS = 1.1156385639067352 nS		# Adaptation coupling conductance
        gbar_Ca nS = 21.045506331690845 nS	# Ca current maximal conductance
        gbar_K_Ca nS = 13.199867205029523 nS	# Ca dependent K current maximal conductance
        e_L_s mV = -69.24596493128396 mV	# Somatic leak reversal potential
        e_L_d mV = -55.000000000000014 mV	# Distal leak reversal potential
        e_K mV = -90 mV		       		# K reversal potential

        # spike adaptation parameters

        a real = 0.				# Subthreshold adaptation
        b mV = 40. mV            		# Spike-triggered adaptation
        delta_T mV = 2.0 mV       		# Slope factor
        tau_w ms = 500.0 ms       		# Adaptation time constant
        e_Na_Adex mV = -50. mV        		# Membrane voltage threshold
        V_th mV = -40. mV          		# Spike detection threshold
        V_max mV = 50 mV         		# Bounding potential

        # somatic synaptic parameters

        E_exc_s mV = 0 mV			# Somatic excitatory reversal potential
        tau_syn_exc_s ms = 0.2 ms    		# Synaptic time constant for somatic excitatory synapse
        E_inh_s mV = -85.0 mV        		# Somatic inhibitory reversal potential
        tau_syn_inh_s ms = 2.0 ms   		# Synaptic time constant for somatic inhibitory synapse

        # distal synaptic parameters

        E_exc_d mV = 0 mV			# Distal excitatory reversal potential
        tau_syn_exc_d ms = 0.2 ms    		# Synaptic time constant for somatic excitatory synapse
        E_inh_d mV = -85.0 mV        		# Distal inhibitory reversal potential
        tau_syn_inh_d ms = 2.0 ms    		# Synaptic time constant for distal inhibitory synapse

        phi pA**-1 = 3.92830985228413e-08 pA**-1# Scaling factor in Ca concentration dynamics
        Ca_th mmol = 0.00043 mmol		# Calcium concentration threshold
        Ca_0 mmol = 0.0001 mmol  		# Baseline intra-cellular Ca concentration
	
        tau_decay_Ca ms = 103.57233790866408 ms # Ca current activating function time constant

        m_slope real = 0.5		        # Ca current activating function slope
        m_half mV = -9 mV			# Ca current activating function half voltage
        tau_m ms = 15 ms			# Ca current activating function time constant

        h_slope real = -0.5			# Ca current deactivating function slope
        h_half mV = -21 mV			# Ca current deactivating function half voltage
        tau_h ms = 80 ms			# Ca current deactivating function time constant

        exp_K_Ca real = 4.8			# Exponential factor in Ca dependent K current
        tau_m_K_Ca ms = 1.0 ms			# Ca dependent K current activating function time constant

        # to compute the Ca current reversal potential
        k_Ca mV = 1000 mV
        R_Ca real = 8.31441
        T_Ca real = 309.15
        F_Ca real = 96489
        c_Ca_o mmol = 2. mmol			# Calcium concentration outside the neuron

        # Constant external input current
        I_e_s pA = 0 pA
        I_e_d pA = 0 pA

        # AMPA synapse
        tau_r_ampa ms = 0.2 ms
        tau_d_ampa ms = 3.0 ms
        e_AMPA mV = 0 mV

        # Beta synapse
        tau_d_beta ms = 5 ms
        tau_r_beta ms = 2 ms
        e_L_beta mV = 90 mV

        # AMPA-NMDA synapse
        tau_r_nmda ms = 0.2 ms
        tau_d_nmda ms = 43 ms
        e_L_AMPA_NMDA mV = 0 mV
        nmda_ratio real = 2.0

    internals:
	## AMPA
        tp_ampa real = (tau_r_ampa * tau_d_ampa) / (tau_d_ampa - tau_r_ampa) * ln( tau_d_ampa / tau_r_ampa )
        g_norm_ampa real =  1. / ( -exp( -tp_ampa / tau_r_ampa ) + exp( -tp_ampa / tau_d_ampa ) )

	## NMDA
        tp_nmda real = (tau_r_nmda * tau_d_nmda) / (tau_d_nmda - tau_r_nmda) * ln( tau_d_nmda / tau_r_nmda )
        g_norm_nmda real =  1. / ( -exp( -tp_nmda / tau_r_nmda ) + exp( -tp_nmda / tau_d_nmda ) )

        ## BETA
        tp_max_beta real = tau_d_beta * ( tau_r_beta * tau_d_beta / ( tau_r_beta + tau_d_beta ) ) / ( ( tau_r_beta * tau_d_beta / ( tau_r_beta + tau_d_beta ) ) - tau_d_beta) * ln( ( tau_r_beta * tau_d_beta / ( tau_r_beta + tau_d_beta ) ) / tau_d_beta )
        g_norm_beta real =  exp( -tp_max_beta / tau_d_beta ) - exp( -tp_max_beta / ( tau_r_beta * tau_d_beta / ( tau_r_beta + tau_d_beta ) ) )

    input:
        exc_spikes_soma <- spike
        inh_spikes_soma <- spike
        I_stim_s pA <- continuous
        # Distal
        exc_spikes_distal <- spike
        inh_spikes_distal <- spike
        I_stim_d pA <- continuous

        spikes_ampa_d <- spike
        spikes_beta_d <- spike
        spikes_ampa_nmda_d <- spike

    output:
        spike

    update:
        if refr_t > 0 ms:
            # neuron is absolute refractory, do not evolve V_m_s
            integrate_odes(w, V_m_d, c_Ca, m_Ca, h_Ca, m_K, refr_t)
        else:
            # neuron not refractory
            integrate_odes(w, V_m_s, V_m_d, c_Ca, m_Ca, h_Ca, m_K)

    onCondition(refr_t <= 0 ms and V_m_s >= V_th):
        # threshold crossing
        refr_t = t_ref     # start of the refractory period
        V_m_s = V_reset
        w += b
        emit_spike()

    function m_inf_Ca(v mV) real:
        m_inf real = 0
        m_inf = 1 / (1 + exp(m_slope * (v - m_half)))
        return m_inf

    function h_inf_Ca(v mV) real:
        h_inf real = 0
        h_inf = 1 / (1 + exp(h_slope * (v - h_half)))
        return h_inf

    function m_inf_K(Ca real) real:
        m_inf real = 0
        m_inf = 1 / (1 + pow((Ca_th / Ca), exp_K_Ca))
        return m_inf

    function e_Ca_calc(k_Ca mV, R_Ca real, T_Ca real, c_Ca_o mmol, c_Ca mmol, F_Ca real) mV:
        e_Ca_rev mV = 0. mV
        e_Ca_rev = k_Ca * R_Ca * T_Ca * ln( c_Ca_o / c_Ca ) / ( 2. * F_Ca )
        return e_Ca_rev